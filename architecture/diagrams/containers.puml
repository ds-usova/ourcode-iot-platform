@startuml Context
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' Styles
UpdateElementStyle("container", $borderColor="#444444")
UpdateElementStyle("external_container", $borderColor="#444444")

System_Boundary(system, "IoT Monitoring System") {

    ' Containers
    Container(gateway, "API Gateway", "Spring Cloud Gateway", "Routing and authorization")
    Container(orchestrator, "API Orchestrator", "Spring Boot", "Coordinates API requests between services")
    Container(command_service, "Command Service", "Go + gRPC", "Accepts commands and sends them to devices")
    Container(device_service, "Device Service", "Spring Boot + ShardingSphere-JDBC", "Manages devices")
    Container(event_service, "Event Service", "Spring Boot", "Reads events from Cassandra")
    Container(redis, "Redis", "In-memory Cache", "Caches requests and responses")
    Container(event_collector, "Event Collector", "Spring Boot", "Collects events from devices")
    Container(minio, "DLT Object Storage", "MinIO", "Saves failed events")
    ContainerDb(event_db, "Events Database", "Cassandra Cluster")
    ContainerQueue(kafka, "Kafka Cluster", "Apache Kafka", "Event / dlt / device id topics")
    Container(device_collector, "Device Collector", "Spring Boot", "Processes device IDs")
    Container(failed_event_processor, "Failed Event Processor", "Spring Boot", "DLT for failed events")
    ContainerDb(commands_db, "Commands Database", "PostgreSQL")
    ContainerDb(devices_db, "Devices Database", "PostgreSQL", "Sharded database for devices. Synchronous replication of each shard")

    ' External containers
    Container_Ext(iot_devices, "IoT Devices", "Embedded devices", "Sends telemetry data and receives commands")
    Container_Ext(keycloack, "Keycloak", "OAuth2", "Authentication and authorization")

    ' Relations
    Rel_Right(gateway, keycloack, "OIDC authorization")
    Rel(gateway, orchestrator, "REST", "JWT")

    Rel(orchestrator, command_service, "gRPC")
    Rel(orchestrator, device_service, "gRPC")
    Rel(orchestrator, event_service, "REST")
    Rel(orchestrator, redis, "Reads/writes\n cache")

    Rel(iot_devices, command_service, "gRPC")

    Rel(command_service, commands_db, "JDBC (write/read)")

    Rel(device_service, devices_db, "Sharded JDBC (write/read)")

    Rel(event_service, event_db, "Reads events")

    Rel(event_collector, kafka, "Publishes to \n[events, device-id, dlt] topics")
    Rel(event_collector, event_db, "Writes events")

    Rel(device_collector, kafka, "Consumes \n[device-id]\n topic")

    Rel(failed_event_processor, kafka, "Consumes \n[dlt]\n topic")
    Rel(failed_event_processor, minio, "Writes failed events (JSON)")

    ' Force layout with hidden relations
    keycloack -[hidden]down-> iot_devices
}
@enduml