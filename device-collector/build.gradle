plugins {
    id "java"
    id "jacoco"
    id "org.springframework.boot" version "$springBootVersion"
    id "io.spring.dependency-management" version "$springDependencyManagementVersion"
    id "com.github.davidmc24.gradle.plugin.avro" version "$avroPluginVersion"
}

group = "org.ourcode"
version = "$appVersion"
description = "device-collector"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

repositories {
    mavenCentral()
    maven {
        url = 'https://packages.confluent.io/maven/'
    }
}

dependencies {
    // Observability
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "io.micrometer:micrometer-registry-prometheus"

    // Kafka
    implementation "org.springframework.kafka:spring-kafka"
    implementation "io.confluent:kafka-avro-serializer:${kafkaAvroSerializerVersion}"
    implementation "org.apache.avro:avro:${avroVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Logging
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"

    // Test
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-testcontainers"

    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:kafka"
    testImplementation "org.testcontainers:toxiproxy"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

tasks.named("test") {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorPath = configurations.annotationProcessor
}

avro {
    createSetters = true
    fieldVisibility = 'PRIVATE'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
