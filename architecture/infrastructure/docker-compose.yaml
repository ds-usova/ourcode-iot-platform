x-postgres-env: &postgres-env
  POSTGRES_DB: ${POSTGRES_DB_NAME}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"

x-postgres-base: &postgres-base
  image: postgres:17.5
  healthcheck:
    test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_NAME}" ]
    interval: 10s
    timeout: 5s
    retries: 5
    start_period: 30s
  deploy:
    resources:
      limits:
        memory: 256M
  networks:
    - backend

x-postgres-exporter: &postgres-exporter
  image: prometheuscommunity/postgres-exporter:latest
  networks:
    - backend
  healthcheck:
    test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics" ]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 30s

services:
  postgres:
    <<: *postgres-base
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      <<: *postgres-env
      # Keycloack database configuration
      KEYCLOAK_DB_USER: ${KEYCLOAK_DB_USER}
      KEYCLOAK_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_DB_SCHEMA: ${KEYCLOAK_DB_SCHEMA}
      # Camunda database configuration
      CAMUNDA_DB_USER: ${CAMUNDA_DB_USER}
      CAMUNDA_DB_PASSWORD: ${CAMUNDA_DB_PASSWORD}
      CAMUNDA_DB_SCHEMA: ${CAMUNDA_DB_SCHEMA}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-postgres.sh:/docker-entrypoint-initdb.d/init-db.sh

  postgres_shard_0:
    <<: *postgres-base
    container_name: postgres_shard_0
    ports:
      - "5433:5432"
    environment:
      <<: *postgres-env
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - ./db/sharding/init-master.sh:/docker-entrypoint-initdb.d/init-master.sh
      - postgres_shard_0_data:/var/lib/postgresql/data

  postgres_shard_0_replica:
    <<: *postgres-base
    container_name: postgres_shard_0_replica
    hostname: postgres_shard_0_replica
    ports:
      - "5435:5432"
    environment:
      <<: *postgres-env
      PGUSER: ${POSTGRES_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - ./db/sharding/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
      - postgres_shard_0_replica_data:/var/lib/postgresql/data
    depends_on:
      postgres_shard_0:
        condition: service_healthy

  postgres_shard_1:
    <<: *postgres-base
    container_name: postgres_shard_1
    ports:
      - "5434:5432"
    environment:
      <<: *postgres-env
    volumes:
      - postgres_shard_1_data:/var/lib/postgresql/data

  redis:
    image: redis:8.2
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis_insight:
    image: redis/redisinsight:latest
    container_name: redis_insight
    ports:
      - "5540:5540"
    volumes:
      - redis_insight_data:/data
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy

  cassandra:
    image: cassandra:5.0
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: ${CASSANDRA_CLUSTER_NAME}
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "SHOW HOST" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  cassandra-load-keyspace:
    image: cassandra:5.0
    container_name: cassandra-load-keyspace
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - ./db/init-cassandra.cql:/schema.cql
    command: /bin/bash -c "cqlsh cassandra -f /schema.cql"

  # Kafka
  kafka:
    image: apache/kafka:3.9.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-init:
    image: apache/kafka:3.9.1
    container_name: kafka_init
    networks:
      - backend
    volumes:
      - ./kafka/create-topics.sh:/create-topics.sh
    entrypoint: [ "/bin/sh", "-c" ]
    command: [ "/create-topics.sh" ]
    depends_on:
      kafka:
        condition: service_healthy
    restart: "no"

  schema-registry:
    image: bitnami/schema-registry:8.0
    container_name: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKA_BROKERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_AVRO_COMPATIBILY_LEVEL: BACKWARD
      SCHEMA_REGISTRY_DEBUG: "true"
    networks:
      - backend
    depends_on:
      kafka:
        condition: service_healthy

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    networks:
      - backend
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    networks:
      - backend
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:26.3
    container_name: keycloak
    ports:
      - "8083:8080"
    networks:
      - backend
    command: start-dev
    environment:
      KC_HOSTNAME: "localhost"
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB_NAME}
      KC_DB_SCHEMA: ${KEYCLOAK_DB_SCHEMA}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      # Curl is no longer available in Keycloak 26, using CMD-SHELL for healthcheck
      test: [ "CMD-SHELL", "exec 3<> /dev/tcp/127.0.0.1/8080; echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost:8080\\r\\nConnection: close\\r\\n\\r\\n' >&3; if [ $? -eq 0 ]; then echo 'Healthcheck Successful'; exit 0; else echo 'Healthcheck Failed'; exit 1; fi;" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  camunda:
    image: camunda/camunda-bpm-platform:tomcat-7.23.0
    container_name: camunda
    ports:
      - "8084:8080"
    networks:
      - backend
    environment:
      DB_DRIVER: org.postgresql.Driver
      DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB_NAME}?currentSchema=${CAMUNDA_DB_SCHEMA}
      DB_USERNAME: ${CAMUNDA_DB_USER}
      DB_PASSWORD: ${CAMUNDA_DB_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/engine-rest/engine" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.listen-address=:9090"
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy" ]
      interval: 30s
      timeout: 10s
      retries: 5

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - backend
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres-exporter:
    <<: *postgres-exporter
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB_NAME}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy

  postgres-exporter-shard-0:
    <<: *postgres-exporter
    container_name: postgres-exporter-shard-0
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_shard_0:5432/${POSTGRES_DB_NAME}?sslmode=disable"
    ports:
      - "9188:9187"
    depends_on:
      postgres_shard_0:
        condition: service_healthy

  postgres-exporter-shard-1:
    <<: *postgres-exporter
    container_name: postgres-exporter-shard-1
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_shard_1:5432/${POSTGRES_DB_NAME}?sslmode=disable"
    ports:
      - "9189:9187"
    depends_on:
      postgres_shard_1:
        condition: service_healthy

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    command:
      - "--kafka.server=kafka:9092"
    ports:
      - "9308:9308"
    networks:
      - backend
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9308/metrics" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Artifactory
  artifactory:
    image: releases-docker.jfrog.io/jfrog/artifactory-oss:7.59.9
    container_name: artifactory
    ports:
      - "8081:8081"
      - "8082:8082"
    volumes:
      - artifactory_data:/var/opt/jfrog/artifactory
    environment:
      JF_ROUTER_ENTRYPOINTS_EXTERNALPORT: 8082
      JF_SHARED_DATABASE_TYPE: postgresql
      JF_SHARED_DATABASE_DRIVER: org.postgresql.Driver
      JF_SHARED_DATABASE_USERNAME: ${POSTGRES_USER}
      JF_SHARED_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      JF_SHARED_DATABASE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB_NAME}
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy

  # Application
  event-collector:
    image: event-collector:latest
    container_name: event-collector
    ports:
      - "8090:8090"
    build:
      context: ./../../event-collector
    networks:
      - backend
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
      schema-registry:
        condition: service_started
      cassandra:
        condition: service_healthy
      cassandra-load-keyspace:
        condition: service_completed_successfully
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CASSANDRA_CONTACT_POINTS=cassandra
      - CASSANDRA_PORT=9042

volumes:
  postgres_data:
    name: ourcode-iot-postgres-data
  postgres_shard_0_data:
    name: ourcode-iot-postgres-data-shard-0
  postgres_shard_1_data:
    name: ourcode-iot-postgres-data-shard-1
  redis_insight_data:
    name: ourcode-iot-redis-insight-data
  cassandra_data:
    name: ourcode-iot-cassandra-data
  minio_data:
    name: ourcode-iot-minio-data
  grafana_data:
    name: ourcode-iot-grafana-data
  postgres_shard_0_replica_data:
    name: ourcode-iot-postgres-data-shard-0-replica
  artifactory_data:
    name: ourcode-iot-artifactory-data

networks:
  backend:
    name: ourcode-iot-backend
    driver: bridge
